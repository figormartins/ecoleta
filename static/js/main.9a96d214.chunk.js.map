{"version":3,"sources":["assets/logo.svg","pages/Home/index.tsx","services/api.ts","components/Dropzone/index.tsx","pages/CreatePoint/index.tsx","routes.tsx","App.tsx","index.tsx"],"names":["module","exports","Home","id","className","src","logo","alt","to","api","axios","create","baseURL","apiIBGE","Dropzone","onFileUploaded","useState","selectedFileUrl","setSelectedFileUrl","onDrop","useCallback","acceptedFiles","file","fileUrl","URL","createObjectURL","useDropzone","accept","getRootProps","getInputProps","isDragActive","CreatePoint","items","setItems","ufs","setuFs","cities","setCities","selectedUf","setSelectedUf","selectedCity","setSelectedCity","initialPosition","setInitialPosition","selectedPosition","setSelectedPosition","selectedItems","setSelectedItems","selectedFile","setSelectedFile","history","useHistory","name","email","whatsapp","formData","setFormData","handleInputChange","event","target","value","handleSubmit","a","preventDefault","uf","city","latitude","longitude","data","FormData","append","String","join","post","alert","push","useEffect","navigator","geolocation","getCurrentPosition","position","coords","get","then","reponse","params","orderBy","response","ufInitials","map","sigla","cityNames","nome","onSubmit","htmlFor","type","onChange","Map","center","zoom","onClick","latlng","lat","lng","TileLayer","attribution","url","Marker","key","item","findIndex","filteredItems","filter","handleSelectItem","includes","image_url","title","Routes","component","path","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a96d214.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.26434f1f.svg\";","import React from 'react'\r\nimport { FiLogIn } from 'react-icons/fi'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport './styles.css'\r\n\r\nimport logo from '../../assets/logo.svg'\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div id=\"page-home\">\r\n      <div className=\"content\">\r\n        <header>\r\n          <img src={logo} alt=\"Ecoleta\" />\r\n        </header>\r\n\r\n        <main>\r\n          <h1>Seu marketplace de coleta de resíduos.</h1>\r\n          <p>Ajudamos pessoas a encontrarem pontos de coleta de forma eficiente</p>\r\n\r\n          <Link to=\"/create-point\">\r\n            <span>\r\n              <FiLogIn />\r\n            </span>\r\n            <strong>Cadastre um ponto de coleta</strong>\r\n          </Link>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home","import axios from 'axios'\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:3333'\r\n})\r\n\r\nconst apiIBGE = axios.create({\r\n  baseURL: 'https://servicodados.ibge.gov.br/api/v1/localidades/estados'\r\n})\r\n\r\nexport { api, apiIBGE } ","import React, { useCallback, useState } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { FiUpload } from 'react-icons/fi'\r\n\r\nimport './styles.css'\r\n\r\ninterface Props {\r\n  onFileUploaded: (file: File) => void\r\n}\r\n\r\nconst Dropzone: React.FC<Props> = ({ onFileUploaded }) => {\r\n  const [selectedFileUrl, setSelectedFileUrl] = useState('')\r\n\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    const file = acceptedFiles[0]\r\n\r\n    const fileUrl = URL.createObjectURL(file)\r\n    setSelectedFileUrl(fileUrl)\r\n    onFileUploaded(file)\r\n  }, [onFileUploaded])\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    onDrop,\r\n    accept: 'image/*'\r\n  })\r\n\r\n  return (\r\n    <div className=\"dropzone\" {...getRootProps()}>\r\n      <input {...getInputProps()} accept=\"image/*\" />\r\n      {selectedFileUrl ?\r\n        <img src={selectedFileUrl} alt=\"Point thumbnail\" /> :\r\n        (\r\n          <p>\r\n            <FiUpload />\r\n            {isDragActive ?\r\n\r\n              \"Coloque a imagem do seu estabelecimento aqui ...\"\r\n              :\r\n              \"Arraste uma imagem, ou click para seleciona-lá\"\r\n            }\r\n          </p>\r\n        )\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dropzone","import React, { useEffect, useState, ChangeEvent, FormEvent } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { FiArrowLeft } from 'react-icons/fi'\r\nimport { Map, TileLayer, Marker } from 'react-leaflet'\r\nimport { LeafletMouseEvent } from 'leaflet'\r\nimport { api, apiIBGE } from '../../services/api'\r\n\r\nimport Dropzone from '../../components/Dropzone'\r\n\r\nimport './styles.css'\r\n\r\nimport logo from '../../assets/logo.svg'\r\n\r\ninterface Item {\r\n  id: number\r\n  title: string\r\n  image_url: string\r\n}\r\n\r\ninterface IBGEUFResponse {\r\n  sigla: string\r\n}\r\n\r\ninterface IBGECityResponse {\r\n  nome: string\r\n}\r\n\r\nconst CreatePoint = () => {\r\n  const [items, setItems] = useState<Item[]>([])\r\n  const [ufs, setuFs] = useState<string[]>([])\r\n  const [cities, setCities] = useState<string[]>([])\r\n\r\n  const [selectedUf, setSelectedUf] = useState('0')\r\n  const [selectedCity, setSelectedCity] = useState('0')\r\n  const [initialPosition, setInitialPosition] = useState<[number, number]>([0, 0])\r\n  const [selectedPosition, setSelectedPosition] = useState<[number, number]>([0, 0])\r\n  const [selectedItems, setSelectedItems] = useState<number[]>([])\r\n  const [selectedFile, setSelectedFile] = useState<File>()\r\n\r\n  const history = useHistory()\r\n\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    email: '',\r\n    whatsapp: ''\r\n  })\r\n\r\n  const handleSelectUf = (event: ChangeEvent<HTMLSelectElement>) => {\r\n    const uf = event.target.value\r\n\r\n    setSelectedUf(uf)\r\n  }\r\n\r\n  const handleSelectCity = (event: ChangeEvent<HTMLSelectElement>) => {\r\n    const city = event.target.value\r\n\r\n    setSelectedCity(city)\r\n  }\r\n\r\n  const handleMapClick = (event: LeafletMouseEvent) => {\r\n    setSelectedPosition([\r\n      event.latlng.lat,\r\n      event.latlng.lng\r\n    ])\r\n  }\r\n\r\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = event.target\r\n\r\n    setFormData({ ...formData, [name]: value })\r\n  }\r\n\r\n  const handleSelectItem = (id: number) => {\r\n    const alreadySelected = selectedItems.findIndex(item => item === id)\r\n\r\n    if (alreadySelected >= 0) {\r\n      const filteredItems = selectedItems.filter(item => item !== id)\r\n\r\n      setSelectedItems(filteredItems)\r\n    }\r\n    else {\r\n      setSelectedItems([...selectedItems, id])\r\n    }\r\n\r\n  }\r\n\r\n  const handleSubmit = async (event: FormEvent) => {\r\n    event.preventDefault()\r\n\r\n    const { name, email, whatsapp } = formData\r\n    const uf = selectedUf\r\n    const city = selectedCity\r\n    const [latitude, longitude] = selectedPosition\r\n    const items = selectedItems\r\n\r\n    const data = new FormData()\r\n\r\n    data.append('name', name)\r\n    data.append('email', email)\r\n    data.append('whatsapp', whatsapp)\r\n    data.append('uf', uf)\r\n    data.append('city', city)\r\n    data.append('latitude', String(latitude))\r\n    data.append('longitude', String(longitude))\r\n    data.append('items', items.join(','))\r\n\r\n    if (selectedFile)\r\n      data.append('image', selectedFile)\r\n\r\n    await api.post('points', data)\r\n    alert('ponto de coleta criado')\r\n    history.push('/')\r\n  }\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(position => {\r\n      const { latitude, longitude } = position.coords\r\n\r\n      setInitialPosition([latitude, longitude])\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    api.get('items').then(reponse => {\r\n      setItems(reponse.data)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    apiIBGE.get<IBGEUFResponse[]>('', {\r\n      params: {\r\n        orderBy: 'nome'\r\n      }\r\n    }).then(response => {\r\n      const ufInitials = response.data.map(uf => uf.sigla)\r\n      setuFs(ufInitials)\r\n    })\r\n  }, [])\r\n\r\n\r\n  useEffect(() => {\r\n    if (selectedUf === '0') {\r\n      return\r\n    }\r\n\r\n    apiIBGE.get<IBGECityResponse[]>(`/${selectedUf}/municipios`)\r\n      .then(response => {\r\n        const cityNames = response.data.map(city => city.nome)\r\n\r\n        setCities(cityNames)\r\n      })\r\n\r\n  }, [selectedUf])\r\n\r\n  return (\r\n    <div id=\"page-create-point\">\r\n      <header>\r\n        <img src={logo} alt=\"Ecoleta\" />\r\n        <Link to=\"/\">\r\n          <FiArrowLeft />\r\n          Voltar para home\r\n        </Link>\r\n      </header>\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <h1>Cadastro do <br /> ponto de coleta</h1>\r\n\r\n        <Dropzone onFileUploaded={setSelectedFile} />\r\n\r\n        <fieldset>\r\n          <legend>\r\n            <h2>Datos</h2>\r\n          </legend>\r\n\r\n          <div className=\"field\">\r\n            <label htmlFor=\"name\">Nome da entidade</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              id=\"name\"\r\n              onChange={handleInputChange}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"field-group\">\r\n            <div className=\"field\">\r\n              <label htmlFor=\"email\">E-mail</label>\r\n              <input\r\n                type=\"email\"\r\n                name=\"email\"\r\n                id=\"email\"\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n            <div className=\"field\">\r\n              <label htmlFor=\"whatsapp\">Whatsapp</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"whatsapp\"\r\n                id=\"whatsapp\"\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n          </div>\r\n        </fieldset>\r\n\r\n        <fieldset>\r\n          <legend>\r\n            <h2>Endereço</h2>\r\n            <span>Selecione o endereço no mapa</span>\r\n          </legend>\r\n\r\n          <Map center={initialPosition} zoom={15} onClick={handleMapClick}>\r\n            <TileLayer\r\n              attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n\r\n            <Marker position={selectedPosition} />\r\n          </Map>\r\n\r\n          <div className=\"field-group\">\r\n            <div className=\"field\">\r\n              <label htmlFor=\"uf\">Estado (UF)</label>\r\n              <select\r\n                name=\"uf\"\r\n                id=\"uf\"\r\n                value={selectedUf}\r\n                onChange={handleSelectUf}\r\n              >\r\n                <option value=\"0\">Selecione uma UF</option>\r\n                {ufs.map(uf => (\r\n                  <option key={uf} value={uf}>{uf}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"field\">\r\n              <label htmlFor=\"city\">Cidade</label>\r\n              <select\r\n                name=\"city\"\r\n                id=\"city\"\r\n                value={selectedCity}\r\n                onChange={handleSelectCity}\r\n              >\r\n                <option value=\"0\">Selecione uma cidade</option>\r\n                {cities.map(city => (\r\n                  <option key={city} value={city}>{city}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </fieldset>\r\n\r\n        <fieldset>\r\n          <legend>\r\n            <h2>Ítens de coleta</h2>\r\n            <span>Selecione um ou mais ítens abaixo</span>\r\n          </legend>\r\n\r\n          <ul className=\"items-grid\">\r\n            {items.map(item => (\r\n              <li\r\n                key={item.id}\r\n                onClick={() => handleSelectItem(item.id)}\r\n                className={selectedItems.includes(item.id) ? 'selected' : ''}\r\n              >\r\n                <img src={item.image_url} alt={item.title} />\r\n                <span>{item.title}</span>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </fieldset>\r\n\r\n        <button type=\"submit\">\r\n          Cadastrar ponto de coleta\r\n        </button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CreatePoint","import React from 'react'\r\nimport { Route, BrowserRouter } from 'react-router-dom'\r\n\r\nimport Home from './pages/Home'\r\nimport CreatePoint from './pages/CreatePoint'\r\n\r\nconst Routes = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Route component={Home} path=\"/\" exact />\r\n      <Route component={CreatePoint} path=\"/create-point\" />\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default Routes","import React from 'react'\r\nimport './App.css'\r\n\r\nimport Routes from './routes'\r\n\r\nconst App = () => {\r\n  \r\n  return (\r\n      <Routes />\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}